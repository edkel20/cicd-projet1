name: CI/CD workflow

env:
  SERVER_IP: "51.38.177.231"
  SERVER_USER: root

on:
  push:
    branches: main

jobs:
  check-tests-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
      - name: checkout le code
        uses: actions/checkout@v4
      - name: installer node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: server/package-lock.json
      - name: install dependencies
        run: npm ci --prefer-offline
      - name: verify code
        run: npm run lint
      - name: verify vulnerabilities of dependencies
        run: npm audit fix
      - name: execute tests
        run: npm run test:ci
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: edkel20/cicd-projet1

  check-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: checkout le code
        uses: actions/checkout@v4
      - name: installer node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: client/package-lock.json
      - name: install dependencies
        run: npm ci --prefer-offline
      - name: verify code
        run: npm run lint
      - name: verify vulnerabilities of dependencies
        run: npm audit fix

  build-frontend:
    needs: check-frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: checkout le code
        uses: actions/checkout@v4
      - name: installer node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: client/package-lock.json
      - name: install dependencies
        run: npm ci --prefer-offline
      - name: build application frontend
        run: npm run build
      - name: upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: ./client/dist

  test-e2e-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: ["chrome", "firefox", "edge"]
    steps:
      - name: checkout le code
        uses: actions/checkout@v4
      - name: installer node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: '**/package-lock.json'
      - name: install dependencies
        run: |
          cd server
          npm ci --prefer-offline
      - name: install client dependencies
        run: |
          cd client
          npm ci --prefer-offline
      - name: build frontend
        run: |
          cd client
          npm run build:e2e
#      - name: download build artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: build
#          path: ./client/dist
      - name: start backend
        run: |
          cd server
          npm start &
      - name: exec cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./client
          browser: ${{ matrix.browser }}
          start: npm run preview
          wait-on: http://localhost:4173
          wait-on-timeout: 60
          config: baseUrl=http://localhost:4173
      - name: upload coverage reports to CodeCov
        if: matrix.browser == 'chrome'
        uses: codecov/codecov-actions@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    needs: [check-tests-backend, test-e2e-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./dist
      - name: deploy on the server
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{ secrets.SSH_KEY_VPS }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          scp -r ./server $SERVER_USER@$SERVER_IP:/var/www
          scp -r ./dist $SERVER_USER@$SERVER_IP:/var/www
          ssh $SERVER_USER@$SERVER_IP "cd /var/www/server && npm install --omit=dev"
          ssh $SERVER_USER@$SERVER_IP "cd /var/www/server && pm2 startOrRestart ecosystem.config.js --env production && pm2 save"
